services:
  # PostgreSQL Database for CI
  postgres:
    image: postgres:17
    container_name: celebrum-postgres-ci
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set for CI security} # SECURITY: Required password
      POSTGRES_DB: celebrum_ai
    volumes:
      - postgres_data_ci:/var/lib/postgresql/data
      - ./scripts/init-minimal.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 20s
      timeout: 30s
      retries: 25
      start_period: 120s
    networks:
      - celebrum-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: celebrum-redis-ci
    restart: unless-stopped
    volumes:
      - redis_data_ci:/data
      - ./configs/redis/redis-docker.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - celebrum-network

  # CCXT Service (Node.js)
  ccxt-service:
    build:
      context: ./ccxt-service
      dockerfile: Dockerfile
    container_name: celebrum-ccxt-ci
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=info
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'bun --eval ''fetch("http://localhost:3001/health").then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))'''
        ]
      interval: 15s
      timeout: 15s
      retries: 12
      start_period: 60s
    networks:
      - celebrum-network

  # Main Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celebrum-app-ci
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set for CI security} # SECURITY: Required password
      - DATABASE_DBNAME=celebrum_ai
      - DATABASE_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CCXT_SERVICE_URL=http://ccxt-service:3001
      - CCXT_TIMEOUT=30
      - JWT_SECRET=${JWT_SECRET:-test-jwt-secret-for-ci} # SECURITY: Use environment variable
      - SERVER_PORT=8080
    volumes:
      - app_data_ci:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ccxt-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "-O",
          "/dev/null",
          "http://localhost:8080/health"
        ]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 90s
    networks:
      - celebrum-network

volumes:
  postgres_data_ci:
    driver: local
  redis_data_ci:
    driver: local
  app_data_ci:
    driver: local

networks:
  celebrum-network:
    driver: bridge
