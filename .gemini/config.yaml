# Gemini Code Assist Configuration for Celebrum AI Go
# Cryptocurrency Arbitrage Trading System

# Project metadata
project:
  name: "celebrum-ai-go"
  description: "Cryptocurrency arbitrage trading system built in Go"
  language: "go"
  framework: "gin"

# Code review preferences
code_review:
  # Focus areas for code review
  focus_areas:
    - correctness
    - security
    - performance
    - maintainability
    - testing
  
  # Specific attention for financial trading systems
  financial_trading_focus:
    - precision_arithmetic
    - error_handling
    - rate_limiting
    - data_validation
    - concurrent_safety

# Language-specific settings
go:
  # Go-specific best practices
  conventions:
    - effective_go
    - go_proverbs
    - standard_library_usage
  
  # Security considerations for financial applications
  security:
    - input_validation
    - sql_injection_prevention
    - api_key_handling
    - rate_limiting
    - concurrent_access_control

# Project-specific patterns
patterns:
  # Cryptocurrency trading specific patterns
  trading:
    - exchange_abstraction
    - order_management
    - portfolio_tracking
    - risk_management
    - market_data_handling
  
  # Architecture patterns
  architecture:
    - clean_architecture
    - dependency_injection
    - repository_pattern
    - service_layer
    - error_wrapping

# Testing preferences
testing:
  coverage_threshold: 80
  test_types:
    - unit_tests
    - integration_tests
    - benchmark_tests
  
  # Financial system testing requirements
  financial_testing:
    - precision_tests
    - edge_case_handling
    - concurrent_access_tests
    - api_error_simulation

# Documentation requirements
documentation:
  required_for:
    - public_functions
    - complex_algorithms
    - api_endpoints
    - configuration_options
  
  style: "godoc"
  include_examples: true

# Performance considerations
performance:
  # Critical for high-frequency trading
  optimization_areas:
    - memory_allocation
    - goroutine_management
    - database_queries
    - api_calls
    - data_serialization

# Monitoring and observability
observability:
  logging:
    - structured_logging
    - log_levels
    - sensitive_data_masking
  
  metrics:
    - trading_metrics
    - system_metrics
    - error_rates
    - latency_tracking