- In ccxt-service/index.js around lines 633 to 644, the code assumes
exchange.fetchFundingRates() returns an object and uses Object.values, which
fails or mis-shapes results when the exchange returns an array (or
null/undefined); make it shape-agnostic by checking the return type
(Array.isArray) and normalizing to an array (use the array directly or
Object.values for objects), guard against null/undefined by defaulting to an
empty array, then map over that normalized array to produce fundingRates with
the same field-safe checks (typeof checks for numbers, fallbacks for timestamps
and nextFundingDatetime) so both array and object responses are handled
uniformly.

- In database/migrations/005_add_funding_rate_support.sql around lines 26 to 45,
add a CHECK to prevent identical venues by enforcing long_exchange_id <>
short_exchange_id, and change the risk_score constraint to match the
system_config range by restricting it to BETWEEN 1.0 AND 5.0 (keep the DEFAULT
1.0), or if you intend to allow 0â€“100 instead, update the system_config
description instead of changing the migration; implement the chosen option so
the CHECK and documentation remain consistent.

- In docker-compose.ci.yml around lines 48 to 53, the service environment includes
API_KEY but not ADMIN_API_KEY which causes index.js to exit when ADMIN_API_KEY
is missing; add ADMIN_API_KEY to the environment block for CI (either reference
the CI secret with the required-check syntax like ${ADMIN_API_KEY:?ADMIN_API_KEY
must be set for ccxt-service} or set a CI-safe value) so the container starts
successfully.

- In docker-compose.single-droplet.yml around lines 97-106 (and similarly at
156-165 and 200-208), the healthcheck uses a JSON-array form that hard-depends
on wget; change to a portable CMD-SHELL form that first attempts curl and falls
back to wget (or uses sh -c to run a one-liner that tries curl || wget) so the
check works across images without guaranteed binaries; update each healthcheck
to use shell form (e.g. sh -c 'command1 || command2') with appropriate flags and
exit codes to probe http://localhost:3000/health (adjust port/path per section).

- In docs/CACHE_ANALYSIS.md around lines 13 to 21, the current text incorrectly
states Redis is required at startup and that no automatic fallback exists;
update the wording to reflect that the application can start without Redis and
that a configured cache selection falls back to the in-memory implementation
when Redis is not configured or unavailable. Mention that services still perform
runtime nil checks (e.g., if redisClient == nil) and skip Redis operations when
needed, and explicitly note that symbol cache remains in-memory; remove the
claim that the app will fail to initialize without Redis and replace it with a
brief description of the graceful fallback behavior and when Redis is used.

