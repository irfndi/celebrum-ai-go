
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "github.com/irfandi/celebrum-ai-go/internal/database"


)

var tests = []testing.InternalTest{

	{"TestBlacklistRepository_ExchangeBlacklistEntry", _test.TestBlacklistRepository_ExchangeBlacklistEntry},

	{"TestBlacklistRepository_ExchangeBlacklistEntry_WithExpiration", _test.TestBlacklistRepository_ExchangeBlacklistEntry_WithExpiration},

	{"TestBlacklistRepository_ConcurrentAccess", _test.TestBlacklistRepository_ConcurrentAccess},

	{"TestBlacklistRepository_DataValidation", _test.TestBlacklistRepository_DataValidation},

	{"TestBlacklistRepository_TimeScenarios", _test.TestBlacklistRepository_TimeScenarios},

	{"TestBlacklistRepository_ErrorScenarios", _test.TestBlacklistRepository_ErrorScenarios},

	{"TestBlacklistRepository_RepositoryMock", _test.TestBlacklistRepository_RepositoryMock},

	{"TestBlacklistRepository_SQLInjection", _test.TestBlacklistRepository_SQLInjection},

	{"TestBlacklistRepository_ConstraintValidation", _test.TestBlacklistRepository_ConstraintValidation},

	{"TestBlacklistRepository_BusinessLogic", _test.TestBlacklistRepository_BusinessLogic},

	{"TestBlacklistRepository_NewBlacklistRepository", _test.TestBlacklistRepository_NewBlacklistRepository},

	{"TestBlacklistRepository_AddExchange_Success", _test.TestBlacklistRepository_AddExchange_Success},

	{"TestBlacklistRepository_RemoveExchange_Success", _test.TestBlacklistRepository_RemoveExchange_Success},

	{"TestBlacklistRepository_RemoveExchange_NotFound", _test.TestBlacklistRepository_RemoveExchange_NotFound},

	{"TestBlacklistRepository_IsBlacklisted_True", _test.TestBlacklistRepository_IsBlacklisted_True},

	{"TestBlacklistRepository_IsBlacklisted_False", _test.TestBlacklistRepository_IsBlacklisted_False},

	{"TestBlacklistRepository_GetAllBlacklisted_Success", _test.TestBlacklistRepository_GetAllBlacklisted_Success},

	{"TestBlacklistRepository_CleanupExpired_Success", _test.TestBlacklistRepository_CleanupExpired_Success},

	{"TestBlacklistRepository_ClearAll_Success", _test.TestBlacklistRepository_ClearAll_Success},

	{"TestBlacklistRepository_GetBlacklistHistory_Success", _test.TestBlacklistRepository_GetBlacklistHistory_Success},

	{"TestPostgresDB_Struct", _test.TestPostgresDB_Struct},

	{"TestPostgresDB_Close_NilPool", _test.TestPostgresDB_Close_NilPool},

	{"TestPostgresDB_Close_WithPool", _test.TestPostgresDB_Close_WithPool},

	{"TestPostgresDB_HealthCheck_NilPool", _test.TestPostgresDB_HealthCheck_NilPool},

	{"TestRedisClient_Struct", _test.TestRedisClient_Struct},

	{"TestRedisClient_Close_NilClient", _test.TestRedisClient_Close_NilClient},

	{"TestRedisClient_HealthCheck_NilClient", _test.TestRedisClient_HealthCheck_NilClient},

	{"TestRedisClient_Set_NilClient", _test.TestRedisClient_Set_NilClient},

	{"TestRedisClient_Get_NilClient", _test.TestRedisClient_Get_NilClient},

	{"TestRedisClient_Delete_NilClient", _test.TestRedisClient_Delete_NilClient},

	{"TestRedisClient_Exists_NilClient", _test.TestRedisClient_Exists_NilClient},

	{"TestNewPostgresConnection_InvalidConfig", _test.TestNewPostgresConnection_InvalidConfig},

	{"TestNewPostgresConnection_InvalidDurationConfig", _test.TestNewPostgresConnection_InvalidDurationConfig},

	{"TestBuildPGXPoolConfig_BuildsFromComponents", _test.TestBuildPGXPoolConfig_BuildsFromComponents},

	{"TestNewRedisConnection_InvalidConfig", _test.TestNewRedisConnection_InvalidConfig},

	{"TestDatabaseConfig_Validation", _test.TestDatabaseConfig_Validation},

	{"TestDurationParsing", _test.TestDurationParsing},

	{"TestContextOperations", _test.TestContextOperations},

	{"TestErrorHandling", _test.TestErrorHandling},

	{"TestRedisClient_Close_WithLogger", _test.TestRedisClient_Close_WithLogger},

	{"TestRedisClient_Close_Success", _test.TestRedisClient_Close_Success},

	{"TestNewRedisConnectionWithRetry_WithErrorRecovery", _test.TestNewRedisConnectionWithRetry_WithErrorRecovery},

	{"TestNewRedisConnectionWithRetry_NonExistentHost", _test.TestNewRedisConnectionWithRetry_NonExistentHost},

	{"TestRedisClient_CacheOperations", _test.TestRedisClient_CacheOperations},

	{"TestRedisClient_Close_Error", _test.TestRedisClient_Close_Error},

	{"TestRedisClient_Close_LoggerOnly", _test.TestRedisClient_Close_LoggerOnly},

	{"TestRedisClient_OperationScenarios", _test.TestRedisClient_OperationScenarios},

	{"TestRedisClient_HealthCheck_Success", _test.TestRedisClient_HealthCheck_Success},

	{"TestTracedDB_Struct", _test.TestTracedDB_Struct},

	{"TestNewTracedDB_NilPool", _test.TestNewTracedDB_NilPool},

	{"TestTracedDB_Query_NilPool", _test.TestTracedDB_Query_NilPool},

	{"TestTracedDB_QueryRow_NilPool", _test.TestTracedDB_QueryRow_NilPool},

	{"TestTracedDB_Exec_NilPool", _test.TestTracedDB_Exec_NilPool},

	{"TestTracedDB_Begin_NilPool", _test.TestTracedDB_Begin_NilPool},

	{"TestTracedDB_BeginTx_NilPool", _test.TestTracedDB_BeginTx_NilPool},

	{"TestTracedDB_Ping_NilPool", _test.TestTracedDB_Ping_NilPool},

	{"TestTracedDB_Close_NilPool", _test.TestTracedDB_Close_NilPool},

	{"TestTracedTx_Struct", _test.TestTracedTx_Struct},

	{"TestTracedTx_Query_NilTx", _test.TestTracedTx_Query_NilTx},

	{"TestTracedTx_QueryRow_NilTx", _test.TestTracedTx_QueryRow_NilTx},

	{"TestTracedTx_Exec_NilTx", _test.TestTracedTx_Exec_NilTx},

	{"TestTracedTx_Commit_NilTx", _test.TestTracedTx_Commit_NilTx},

	{"TestTracedTx_Rollback_NilTx", _test.TestTracedTx_Rollback_NilTx},

	{"TestTracedTx_Begin_NilTx", _test.TestTracedTx_Begin_NilTx},

	{"TestTracedTx_Conn_NilTx", _test.TestTracedTx_Conn_NilTx},

	{"TestTracedTx_CopyFrom_NilTx", _test.TestTracedTx_CopyFrom_NilTx},

	{"TestTracedTx_LargeObjects_NilTx", _test.TestTracedTx_LargeObjects_NilTx},

	{"TestTracedTx_Prepare_NilTx", _test.TestTracedTx_Prepare_NilTx},

	{"TestTracedTx_SendBatch_NilTx", _test.TestTracedTx_SendBatch_NilTx},

	{"TestRecordDatabaseError", _test.TestRecordDatabaseError},

	{"TestRecordDatabaseError_NilError", _test.TestRecordDatabaseError_NilError},

	{"TestRecordDatabaseError_EmptyOperation", _test.TestRecordDatabaseError_EmptyOperation},

	{"TestAddDatabaseSpanAttributes", _test.TestAddDatabaseSpanAttributes},

	{"TestAddDatabaseSpanAttributes_EmptyTable", _test.TestAddDatabaseSpanAttributes_EmptyTable},

	{"TestAddDatabaseSpanAttributes_ZeroRows", _test.TestAddDatabaseSpanAttributes_ZeroRows},

	{"TestAddDatabaseSpanAttributes_NegativeRows", _test.TestAddDatabaseSpanAttributes_NegativeRows},

	{"TestTracedDB_Operations_WithTimeout", _test.TestTracedDB_Operations_WithTimeout},

	{"TestTracedTx_Operations_WithTimeout", _test.TestTracedTx_Operations_WithTimeout},

	{"TestTracedDB_Close_MultipleTimes", _test.TestTracedDB_Close_MultipleTimes},

	{"TestRecordDatabaseError_VariousErrorTypes", _test.TestRecordDatabaseError_VariousErrorTypes},

	{"TestAddDatabaseSpanAttributes_VariousRowCounts", _test.TestAddDatabaseSpanAttributes_VariousRowCounts},

	{"TestRedisClient_Close_WithError", _test.TestRedisClient_Close_WithError},

	{"TestRedisClient_Close_LoggerScenarios", _test.TestRedisClient_Close_LoggerScenarios},

	{"TestRedisClient_Operations_WithTimeout", _test.TestRedisClient_Operations_WithTimeout},

	{"TestRedisClient_Operations_WithCancelledContext", _test.TestRedisClient_Operations_WithCancelledContext},

	{"TestNewRedisConnection_UnreachableHost", _test.TestNewRedisConnection_UnreachableHost},

	{"TestNewRedisConnectionWithRetry_NilErrorRecovery", _test.TestNewRedisConnectionWithRetry_NilErrorRecovery},

	{"TestPostgresDB_Close_MultipleScenarios", _test.TestPostgresDB_Close_MultipleScenarios},

	{"TestNewPostgresConnection_ValidDatabaseURL", _test.TestNewPostgresConnection_ValidDatabaseURL},

	{"TestBuildPGXPoolConfig_ConnectionPoolConfig", _test.TestBuildPGXPoolConfig_ConnectionPoolConfig},

	{"TestBuildPGXPoolConfig_EdgeCases", _test.TestBuildPGXPoolConfig_EdgeCases},

	{"TestBuildPGXPoolConfig_ConnectionPoolBounds", _test.TestBuildPGXPoolConfig_ConnectionPoolBounds},

	{"TestBuildPGXPoolConfig_InvalidDurations", _test.TestBuildPGXPoolConfig_InvalidDurations},

	{"TestBuildPGXPoolConfig_InvalidPoolSizing", _test.TestBuildPGXPoolConfig_InvalidPoolSizing},

	{"TestRedisClient_Close_WithRealClient", _test.TestRedisClient_Close_WithRealClient},

	{"TestRedisClient_Operations_ValueTypes", _test.TestRedisClient_Operations_ValueTypes},

	{"TestRedisClient_Delete_MultipleKeys", _test.TestRedisClient_Delete_MultipleKeys},

	{"TestRedisClient_Exists_MultipleKeys", _test.TestRedisClient_Exists_MultipleKeys},

	{"TestPostgresDB_Close_Success", _test.TestPostgresDB_Close_Success},

	{"TestPostgresDB_Close_Logging", _test.TestPostgresDB_Close_Logging},

	{"TestRedisClient_Close_ErrorScenarios", _test.TestRedisClient_Close_ErrorScenarios},

	{"TestNewPostgresConnection_DatabaseURLDSN", _test.TestNewPostgresConnection_DatabaseURLDSN},

	{"TestNewPostgresConnection_MinimalConfig", _test.TestNewPostgresConnection_MinimalConfig},

	{"TestNewPostgresConnection_ConnectionPoolEdgeCases", _test.TestNewPostgresConnection_ConnectionPoolEdgeCases},

	{"TestNewRedisConnection_AdditionalScenarios", _test.TestNewRedisConnection_AdditionalScenarios},

	{"TestNewPostgresConnection_AdditionalConfigs", _test.TestNewPostgresConnection_AdditionalConfigs},

	{"TestNewPostgresConnection_DurationEdgeCases", _test.TestNewPostgresConnection_DurationEdgeCases},

	{"TestNewTracedDB", _test.TestNewTracedDB},

	{"TestNewPostgresConnection_ErrorScenarios", _test.TestNewPostgresConnection_ErrorScenarios},

	{"TestNewRedisConnection_ErrorScenarios", _test.TestNewRedisConnection_ErrorScenarios},

	{"TestNewRedisConnectionWithRetry_InvalidConfig", _test.TestNewRedisConnectionWithRetry_InvalidConfig},

	{"TestNewPostgresConnection_ExcessivePoolValues", _test.TestNewPostgresConnection_ExcessivePoolValues},

	{"TestNewPostgresConnection_InvalidDurations", _test.TestNewPostgresConnection_InvalidDurations},

	{"TestSchemaValidation_TradingPairsTable", _test.TestSchemaValidation_TradingPairsTable},

	{"TestSchemaValidation_ExchangesTable", _test.TestSchemaValidation_ExchangesTable},

	{"TestSchemaValidation_ExchangeTradingPairsTable", _test.TestSchemaValidation_ExchangeTradingPairsTable},

	{"TestForeignKeyValidation", _test.TestForeignKeyValidation},

	{"TestMigrationSQLGeneration", _test.TestMigrationSQLGeneration},

	{"TestMarketDataValidation", _test.TestMarketDataValidation},

	{"TestPostgreSQLQueryCorrections", _test.TestPostgreSQLQueryCorrections},

	{"TestTelemetry_NewTracedDB", _test.TestTelemetry_NewTracedDB},

	{"TestTelemetry_TracedDB_Query", _test.TestTelemetry_TracedDB_Query},

	{"TestTelemetry_TracedDB_QueryRow", _test.TestTelemetry_TracedDB_QueryRow},

	{"TestTelemetry_TracedDB_Exec", _test.TestTelemetry_TracedDB_Exec},

	{"TestTelemetry_TracedDB_Begin", _test.TestTelemetry_TracedDB_Begin},

	{"TestTelemetry_TracedDB_BeginTx", _test.TestTelemetry_TracedDB_BeginTx},

	{"TestTelemetry_TracedDB_Ping", _test.TestTelemetry_TracedDB_Ping},

	{"TestTelemetry_TracedDB_Close", _test.TestTelemetry_TracedDB_Close},

	{"TestTelemetry_TracedTx_Query", _test.TestTelemetry_TracedTx_Query},

	{"TestTelemetry_TracedTx_QueryRow", _test.TestTelemetry_TracedTx_QueryRow},

	{"TestTelemetry_TracedTx_Exec", _test.TestTelemetry_TracedTx_Exec},

	{"TestTelemetry_TracedTx_Commit", _test.TestTelemetry_TracedTx_Commit},

	{"TestTelemetry_TracedTx_Rollback", _test.TestTelemetry_TracedTx_Rollback},

	{"TestTelemetry_TracedTx_Begin", _test.TestTelemetry_TracedTx_Begin},

	{"TestTelemetry_TracedTx_Conn", _test.TestTelemetry_TracedTx_Conn},

	{"TestTelemetry_TracedTx_CopyFrom", _test.TestTelemetry_TracedTx_CopyFrom},

	{"TestTelemetry_TracedTx_LargeObjects", _test.TestTelemetry_TracedTx_LargeObjects},

	{"TestTelemetry_TracedTx_Prepare", _test.TestTelemetry_TracedTx_Prepare},

	{"TestTelemetry_TracedTx_SendBatch", _test.TestTelemetry_TracedTx_SendBatch},

	{"TestTelemetry_RecordDatabaseError", _test.TestTelemetry_RecordDatabaseError},

	{"TestTelemetry_AddDatabaseSpanAttributes", _test.TestTelemetry_AddDatabaseSpanAttributes},

}

var benchmarks = []testing.InternalBenchmark{

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "github.com/irfandi/celebrum-ai-go/internal/database"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

