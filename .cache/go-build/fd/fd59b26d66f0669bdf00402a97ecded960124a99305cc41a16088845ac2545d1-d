
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "github.com/irfandi/celebrum-ai-go/internal/telemetry"


)

var tests = []testing.InternalTest{

	{"TestNewBusinessTracer", _test.TestNewBusinessTracer},

	{"TestBusinessTracer_TraceArbitrageDetection", _test.TestBusinessTracer_TraceArbitrageDetection},

	{"TestBusinessTracer_RecordArbitrageOpportunity", _test.TestBusinessTracer_RecordArbitrageOpportunity},

	{"TestBusinessTracer_TraceSignalProcessing", _test.TestBusinessTracer_TraceSignalProcessing},

	{"TestBusinessTracer_RecordSignalMetrics", _test.TestBusinessTracer_RecordSignalMetrics},

	{"TestBusinessTracer_TraceTechnicalAnalysis", _test.TestBusinessTracer_TraceTechnicalAnalysis},

	{"TestBusinessTracer_RecordTechnicalAnalysisResult", _test.TestBusinessTracer_RecordTechnicalAnalysisResult},

	{"TestBusinessTracer_TraceMarketDataCollection", _test.TestBusinessTracer_TraceMarketDataCollection},

	{"TestBusinessTracer_RecordMarketDataMetrics", _test.TestBusinessTracer_RecordMarketDataMetrics},

	{"TestBusinessTracer_TraceRiskAssessment", _test.TestBusinessTracer_TraceRiskAssessment},

	{"TestBusinessTracer_RecordRiskMetrics", _test.TestBusinessTracer_RecordRiskMetrics},

	{"TestBusinessTracer_TraceNotification", _test.TestBusinessTracer_TraceNotification},

	{"TestBusinessTracer_RecordNotificationResult", _test.TestBusinessTracer_RecordNotificationResult},

	{"TestBusinessTracer_TraceArbitrageDetectionEmptyExchanges", _test.TestBusinessTracer_TraceArbitrageDetectionEmptyExchanges},

	{"TestBusinessTracer_TraceMarketDataCollectionEmptySymbols", _test.TestBusinessTracer_TraceMarketDataCollectionEmptySymbols},

	{"TestBusinessTracer_RecordArbitrageOpportunityZeroValues", _test.TestBusinessTracer_RecordArbitrageOpportunityZeroValues},

	{"TestBusinessTracer_RecordSignalMetricsZeroValues", _test.TestBusinessTracer_RecordSignalMetricsZeroValues},

	{"TestBusinessTracer_RecordRiskMetricsEdgeCases", _test.TestBusinessTracer_RecordRiskMetricsEdgeCases},

	{"TestBusinessTracer_RecordTechnicalAnalysisResultEdgeCases", _test.TestBusinessTracer_RecordTechnicalAnalysisResultEdgeCases},

	{"TestBusinessTracer_RecordNotificationResultNilError", _test.TestBusinessTracer_RecordNotificationResultNilError},

	{"TestBusinessTracer_ContextCancellation", _test.TestBusinessTracer_ContextCancellation},

	{"TestNormalizeOTLPEndpoint", _test.TestNormalizeOTLPEndpoint},

	{"TestDefaultConfig", _test.TestDefaultConfig},

	{"TestTracerGetters", _test.TestTracerGetters},

	{"TestSpanHelpers", _test.TestSpanHelpers},

	{"TestAttributeHelpers", _test.TestAttributeHelpers},

	{"TestLogger", _test.TestLogger},

	{"TestInitTelemetryDisabled", _test.TestInitTelemetryDisabled},

	{"TestInitTelemetryEnabled", _test.TestInitTelemetryEnabled},

	{"TestShutdown", _test.TestShutdown},

	{"TestGetLogger", _test.TestGetLogger},

	{"TestInitTelemetryWithProviderDisabled", _test.TestInitTelemetryWithProviderDisabled},

	{"TestInitTelemetryWithProviderInvalidEndpoint", _test.TestInitTelemetryWithProviderInvalidEndpoint},

}

var benchmarks = []testing.InternalBenchmark{

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "github.com/irfandi/celebrum-ai-go/internal/telemetry"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

