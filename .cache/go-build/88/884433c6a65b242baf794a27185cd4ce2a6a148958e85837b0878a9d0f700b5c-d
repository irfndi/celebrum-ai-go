
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "github.com/irfandi/celebrum-ai-go/internal/ccxt"


	_xtest "github.com/irfandi/celebrum-ai-go/internal/ccxt_test"

)

var tests = []testing.InternalTest{

	{"TestUnixTimestamp_UnmarshalJSON", _test.TestUnixTimestamp_UnmarshalJSON},

	{"TestUnixTimestamp_UnmarshalJSON_InvalidData", _test.TestUnixTimestamp_UnmarshalJSON_InvalidData},

	{"TestUnixTimestamp_MarshalJSON", _test.TestUnixTimestamp_MarshalJSON},

	{"TestUnixTimestamp_Time", _test.TestUnixTimestamp_Time},

	{"TestHealthResponse_Struct", _test.TestHealthResponse_Struct},

	{"TestHealthResponse_JSONMarshaling", _test.TestHealthResponse_JSONMarshaling},

	{"TestExchangeInfo_Struct", _test.TestExchangeInfo_Struct},

	{"TestExchangeInfo_JSONMarshaling", _test.TestExchangeInfo_JSONMarshaling},

	{"TestExchangesResponse_Struct", _test.TestExchangesResponse_Struct},

	{"TestTicker_Struct", _test.TestTicker_Struct},

	{"TestTicker_JSONMarshaling", _test.TestTicker_JSONMarshaling},

	{"TestTickerResponse_Struct", _test.TestTickerResponse_Struct},

	{"TestTickerData_Struct", _test.TestTickerData_Struct},

	{"TestTickersRequest_Struct", _test.TestTickersRequest_Struct},

	{"TestTickersRequest_JSONMarshaling", _test.TestTickersRequest_JSONMarshaling},

	{"TestTickersResponse_Struct", _test.TestTickersResponse_Struct},

	{"TestOrderBookEntry_Struct", _test.TestOrderBookEntry_Struct},

	{"TestOrderBookEntry_JSONMarshaling", _test.TestOrderBookEntry_JSONMarshaling},

	{"TestOrderBook_Struct", _test.TestOrderBook_Struct},

	{"TestOrderBookResponse_Struct", _test.TestOrderBookResponse_Struct},

	{"TestOHLCV_Struct", _test.TestOHLCV_Struct},

	{"TestOHLCV_JSONMarshaling", _test.TestOHLCV_JSONMarshaling},

	{"TestOHLCVResponse_Struct", _test.TestOHLCVResponse_Struct},

	{"TestTrade_Struct", _test.TestTrade_Struct},

	{"TestTrade_JSONMarshaling", _test.TestTrade_JSONMarshaling},

	{"TestTradesResponse_Struct", _test.TestTradesResponse_Struct},

	{"TestMarketsResponse_Struct", _test.TestMarketsResponse_Struct},

	{"TestMarketsResponse_JSONMarshaling", _test.TestMarketsResponse_JSONMarshaling},

	{"TestErrorResponse_Struct", _test.TestErrorResponse_Struct},

	{"TestErrorResponse_JSONMarshaling", _test.TestErrorResponse_JSONMarshaling},

	{"TestUnixTimestamp_EdgeCases", _test.TestUnixTimestamp_EdgeCases},

	{"TestTicker_EmptyValues", _test.TestTicker_EmptyValues},

	{"TestOrderBook_EmptyOrderBook", _test.TestOrderBook_EmptyOrderBook},

	{"TestTrade_SideValidation", _test.TestTrade_SideValidation},

	{"TestNewService", _test.TestNewService},

	{"TestService_Initialize", _test.TestService_Initialize},

	{"TestService_GetSupportedExchanges", _test.TestService_GetSupportedExchanges},

	{"TestService_FetchSingleTicker", _test.TestService_FetchSingleTicker},

	{"TestService_FetchMarketData", _test.TestService_FetchMarketData},

	{"TestService_FetchMarketData_EmptyExchanges", _test.TestService_FetchMarketData_EmptyExchanges},

	{"TestService_FetchMarketData_EmptySymbols", _test.TestService_FetchMarketData_EmptySymbols},

	{"TestService_GetExchangeInfo_Exists", _test.TestService_GetExchangeInfo_Exists},

	{"TestService_GetExchangeInfo_NotExists", _test.TestService_GetExchangeInfo_NotExists},

	{"TestService_ConcurrentAccess", _test.TestService_ConcurrentAccess},

	{"TestService_LastUpdate", _test.TestService_LastUpdate},

	{"TestService_DifferentConfigs", _test.TestService_DifferentConfigs},

	{"TestService_SupportedExchangesOperations", _test.TestService_SupportedExchangesOperations},

	{"TestService_EdgeCases", _test.TestService_EdgeCases},

	{"TestService_InitializationState", _test.TestService_InitializationState},

	{"TestService_GetServiceURL", _test.TestService_GetServiceURL},

	{"TestService_Close", _test.TestService_Close},

	{"TestService_Struct", _test.TestService_Struct},

	{"TestService_GetSupportedExchanges_Empty", _test.TestService_GetSupportedExchanges_Empty},

	{"TestService_GetSupportedExchanges_Populated", _test.TestService_GetSupportedExchanges_Populated},

	{"TestService_Initialize_Success", _test.TestService_Initialize_Success},

	{"TestService_Initialize_ClientError", _test.TestService_Initialize_ClientError},

	{"TestService_Initialize_BlacklistCacheError", _test.TestService_Initialize_BlacklistCacheError},

	{"TestService_IsHealthy_Healthy", _test.TestService_IsHealthy_Healthy},

	{"TestService_IsHealthy_Unhealthy", _test.TestService_IsHealthy_Unhealthy},

	{"TestService_FetchSingleTicker_Success", _test.TestService_FetchSingleTicker_Success},

	{"TestService_FetchSingleTicker_ClientError", _test.TestService_FetchSingleTicker_ClientError},

	{"TestService_FetchOrderBook_Success", _test.TestService_FetchOrderBook_Success},

	{"TestService_FetchOrderBook_ClientError", _test.TestService_FetchOrderBook_ClientError},

	{"TestService_FetchOHLCV_Success", _test.TestService_FetchOHLCV_Success},

	{"TestService_FetchOHLCV_ClientError", _test.TestService_FetchOHLCV_ClientError},

	{"TestService_FetchTrades_Success", _test.TestService_FetchTrades_Success},

	{"TestService_FetchTrades_ClientError", _test.TestService_FetchTrades_ClientError},

	{"TestService_FetchMarkets_Success", _test.TestService_FetchMarkets_Success},

	{"TestService_FetchMarkets_ClientError", _test.TestService_FetchMarkets_ClientError},

	{"TestService_CalculateArbitrageOpportunities_Success", _test.TestService_CalculateArbitrageOpportunities_Success},

	{"TestService_CalculateArbitrageOpportunities_InsufficientProfit", _test.TestService_CalculateArbitrageOpportunities_InsufficientProfit},

	{"TestService_CalculateArbitrageOpportunities_ClientError", _test.TestService_CalculateArbitrageOpportunities_ClientError},

	{"TestService_CalculateArbitrageOpportunities_EmptyExchanges", _test.TestService_CalculateArbitrageOpportunities_EmptyExchanges},

	{"TestService_FetchFundingRate", _test.TestService_FetchFundingRate},

	{"TestService_FetchFundingRate_Error", _test.TestService_FetchFundingRate_Error},

	{"TestService_FetchFundingRates", _test.TestService_FetchFundingRates},

	{"TestService_FetchFundingRates_EmptySymbols", _test.TestService_FetchFundingRates_EmptySymbols},

	{"TestService_FetchFundingRates_Error", _test.TestService_FetchFundingRates_Error},

	{"TestService_FetchAllFundingRates", _test.TestService_FetchAllFundingRates},

	{"TestService_FetchAllFundingRates_Error", _test.TestService_FetchAllFundingRates_Error},

	{"TestService_CalculateFundingRateArbitrage", _test.TestService_CalculateFundingRateArbitrage},

	{"TestService_CalculateFundingRateArbitrage_InsufficientProfit", _test.TestService_CalculateFundingRateArbitrage_InsufficientProfit},

	{"TestService_CalculateFundingRateArbitrage_PriceDifferenceRisk", _test.TestService_CalculateFundingRateArbitrage_PriceDifferenceRisk},

	{"TestService_CalculateFundingRateArbitrage_InsufficientExchanges", _test.TestService_CalculateFundingRateArbitrage_InsufficientExchanges},

	{"TestService_CalculateFundingRateArbitrage_ClientError", _test.TestService_CalculateFundingRateArbitrage_ClientError},

	{"TestService_GetExchangeConfig", _test.TestService_GetExchangeConfig},

	{"TestService_GetExchangeConfig_Error", _test.TestService_GetExchangeConfig_Error},

	{"TestService_AddExchangeToBlacklist", _test.TestService_AddExchangeToBlacklist},

	{"TestService_AddExchangeToBlacklist_Error", _test.TestService_AddExchangeToBlacklist_Error},

	{"TestService_RemoveExchangeFromBlacklist", _test.TestService_RemoveExchangeFromBlacklist},

	{"TestService_RemoveExchangeFromBlacklist_Error", _test.TestService_RemoveExchangeFromBlacklist_Error},

	{"TestService_RefreshExchanges", _test.TestService_RefreshExchanges},

	{"TestService_RefreshExchanges_Error", _test.TestService_RefreshExchanges_Error},

	{"TestService_AddExchange", _test.TestService_AddExchange},

	{"TestService_FetchMarketData_Error", _test.TestService_FetchMarketData_Error},

	{"TestService_AddExchange_Error", _test.TestService_AddExchange_Error},

	{"TestNewClient", _xtest.TestNewClient},

	{"TestClient_HealthCheck", _xtest.TestClient_HealthCheck},

	{"TestClient_GetExchanges", _xtest.TestClient_GetExchanges},

	{"TestClient_GetTicker", _xtest.TestClient_GetTicker},

	{"TestClient_GetTickers", _xtest.TestClient_GetTickers},

	{"TestClient_GetOrderBook", _xtest.TestClient_GetOrderBook},

	{"TestClient_GetTrades", _xtest.TestClient_GetTrades},

	{"TestClient_GetOHLCV", _xtest.TestClient_GetOHLCV},

	{"TestClient_GetMarkets", _xtest.TestClient_GetMarkets},

	{"TestClient_GetFundingRate", _xtest.TestClient_GetFundingRate},

	{"TestClient_GetFundingRates", _xtest.TestClient_GetFundingRates},

	{"TestClient_GetAllFundingRates", _xtest.TestClient_GetAllFundingRates},

	{"TestClient_GetExchangeConfig", _xtest.TestClient_GetExchangeConfig},

	{"TestClient_AddExchangeToBlacklist", _xtest.TestClient_AddExchangeToBlacklist},

	{"TestClient_RemoveExchangeFromBlacklist", _xtest.TestClient_RemoveExchangeFromBlacklist},

	{"TestClient_RefreshExchanges", _xtest.TestClient_RefreshExchanges},

	{"TestClient_AddExchange", _xtest.TestClient_AddExchange},

	{"TestClient_FormatSymbolForExchange", _xtest.TestClient_FormatSymbolForExchange},

	{"TestClient_Close", _xtest.TestClient_Close},

}

var benchmarks = []testing.InternalBenchmark{

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "github.com/irfandi/celebrum-ai-go/internal/ccxt"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

