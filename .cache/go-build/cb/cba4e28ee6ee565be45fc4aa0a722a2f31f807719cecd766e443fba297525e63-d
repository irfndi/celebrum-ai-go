
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "github.com/irfandi/celebrum-ai-go/internal/cache"


)

var tests = []testing.InternalTest{

	{"TestInMemoryBlacklistCache", _test.TestInMemoryBlacklistCache},

	{"TestBlacklistCacheExpiration", _test.TestBlacklistCacheExpiration},

	{"TestBlacklistCacheStats", _test.TestBlacklistCacheStats},

	{"TestBlacklistPersistenceInterface", _test.TestBlacklistPersistenceInterface},

	{"TestDatabasePersistenceFlow", _test.TestDatabasePersistenceFlow},

	{"TestRedisBlacklistCache_NewRedisBlacklistCache", _test.TestRedisBlacklistCache_NewRedisBlacklistCache},

	{"TestRedisBlacklistCache_IsBlacklisted", _test.TestRedisBlacklistCache_IsBlacklisted},

	{"TestRedisBlacklistCache_IsBlacklisted_Expired", _test.TestRedisBlacklistCache_IsBlacklisted_Expired},

	{"TestRedisBlacklistCache_Add", _test.TestRedisBlacklistCache_Add},

	{"TestRedisBlacklistCache_Add_NoTTL", _test.TestRedisBlacklistCache_Add_NoTTL},

	{"TestRedisBlacklistCache_Remove", _test.TestRedisBlacklistCache_Remove},

	{"TestRedisBlacklistCache_Remove_NonExistent", _test.TestRedisBlacklistCache_Remove_NonExistent},

	{"TestRedisBlacklistCache_Clear", _test.TestRedisBlacklistCache_Clear},

	{"TestRedisBlacklistCache_Clear_Empty", _test.TestRedisBlacklistCache_Clear_Empty},

	{"TestRedisBlacklistCache_GetStats", _test.TestRedisBlacklistCache_GetStats},

	{"TestRedisBlacklistCache_LogStats", _test.TestRedisBlacklistCache_LogStats},

	{"TestRedisBlacklistCache_Close", _test.TestRedisBlacklistCache_Close},

	{"TestRedisBlacklistCache_GetBlacklistedSymbols", _test.TestRedisBlacklistCache_GetBlacklistedSymbols},

	{"TestRedisBlacklistCache_GetBlacklistedSymbols_Empty", _test.TestRedisBlacklistCache_GetBlacklistedSymbols_Empty},

	{"TestRedisBlacklistCache_GetBlacklistedSymbols_WithExpired", _test.TestRedisBlacklistCache_GetBlacklistedSymbols_WithExpired},

	{"TestRedisBlacklistCache_CleanupExpired", _test.TestRedisBlacklistCache_CleanupExpired},

	{"TestRedisBlacklistCache_CleanupExpired_NoExpired", _test.TestRedisBlacklistCache_CleanupExpired_NoExpired},

	{"TestRedisBlacklistCache_LoadFromDatabase", _test.TestRedisBlacklistCache_LoadFromDatabase},

	{"TestRedisBlacklistCache_LoadFromDatabase_Empty", _test.TestRedisBlacklistCache_LoadFromDatabase_Empty},

	{"TestRedisBlacklistCache_LoadFromDatabase_Error", _test.TestRedisBlacklistCache_LoadFromDatabase_Error},

	{"TestRedisBlacklistCache_LoadFromDatabase_WithExpired", _test.TestRedisBlacklistCache_LoadFromDatabase_WithExpired},

	{"TestInMemoryBlacklistCache_LogStats", _test.TestInMemoryBlacklistCache_LogStats},

	{"TestInMemoryBlacklistCache_Close", _test.TestInMemoryBlacklistCache_Close},

	{"TestBlacklistRepositoryInterface", _test.TestBlacklistRepositoryInterface},

	{"TestNewRedisSymbolCache", _test.TestNewRedisSymbolCache},

	{"TestRedisSymbolCache_Get_Success", _test.TestRedisSymbolCache_Get_Success},

	{"TestRedisSymbolCache_Get_Miss", _test.TestRedisSymbolCache_Get_Miss},

	{"TestRedisSymbolCache_Get_InvalidJSON", _test.TestRedisSymbolCache_Get_InvalidJSON},

	{"TestRedisSymbolCache_Get_ExpiredEntry", _test.TestRedisSymbolCache_Get_ExpiredEntry},

	{"TestRedisSymbolCache_Set", _test.TestRedisSymbolCache_Set},

	{"TestRedisSymbolCache_GetStats", _test.TestRedisSymbolCache_GetStats},

	{"TestRedisSymbolCache_LogStats", _test.TestRedisSymbolCache_LogStats},

	{"TestRedisSymbolCache_Clear_Success", _test.TestRedisSymbolCache_Clear_Success},

	{"TestRedisSymbolCache_Clear_NoKeys", _test.TestRedisSymbolCache_Clear_NoKeys},

	{"TestRedisSymbolCache_GetCachedExchanges_Success", _test.TestRedisSymbolCache_GetCachedExchanges_Success},

	{"TestRedisSymbolCache_GetCachedExchanges_Empty", _test.TestRedisSymbolCache_GetCachedExchanges_Empty},

	{"TestRedisSymbolCache_WarmCache_Success", _test.TestRedisSymbolCache_WarmCache_Success},

	{"TestRedisSymbolCache_WarmCache_AlreadyCached", _test.TestRedisSymbolCache_WarmCache_AlreadyCached},

	{"TestRedisSymbolCache_WarmCache_FetcherError", _test.TestRedisSymbolCache_WarmCache_FetcherError},

	{"TestSymbolCacheStats_ThreadSafety", _test.TestSymbolCacheStats_ThreadSafety},

	{"TestRedisSymbolCache_EmptySymbols", _test.TestRedisSymbolCache_EmptySymbols},

	{"TestRedisSymbolCache_LargeSymbolsList", _test.TestRedisSymbolCache_LargeSymbolsList},

}

var benchmarks = []testing.InternalBenchmark{

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "github.com/irfandi/celebrum-ai-go/internal/cache"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

