version: '3.8'

services:
  # PHASE 1: Database Services
  postgres:
    image: postgres:18
    container_name: celebrum-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      POSTGRES_DB: ${POSTGRES_DB:-celebrum_ai}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      STARTUP_PHASE: "1"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${INIT_SCRIPT_PATH:-./scripts/init.sql}:/docker-entrypoint-initdb.d/init.sql
      - ./database:/database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} && psql -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-celebrum_ai} -c 'SELECT 1;'"]
      interval: ${HEALTHCHECK_INTERVAL:-15s}
      timeout: ${HEALTHCHECK_TIMEOUT:-10s}
      retries: ${HEALTHCHECK_RETRIES:-10}
      start_period: ${HEALTHCHECK_START_PERIOD:-60s}
    networks:
      - celebrum-network
    ports:
      - "${POSTGRES_HOST_PORT:-127.0.0.1:5432}:5432"

  # Migration Service - Runs automatically to sync all environments
  migrate:
    image: postgres:18
    container_name: celebrum-migrate
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-celebrum_ai}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      MIGRATIONS_DIR: /database/migrations
      STARTUP_PHASE: "1"
    volumes:
      - ./scripts:/scripts
      - ./database/migrations:/database/migrations
    command: ["bash", "/scripts/simple-migrate.sh"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - celebrum-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: celebrum-redis
    restart: unless-stopped
    environment:
      STARTUP_PHASE: 1
    volumes:
      - redis_data:/data
      - ./configs/redis/redis-${ENVIRONMENT:-development}.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 30s
    networks:
      - celebrum-network

  # PHASE 3: CCXT Service (Bun) - Warm-up Phase
  ccxt-service:
    build:
      context: ./ccxt-service
      dockerfile: Dockerfile
    image: celebrum-ai/ccxt-service:${IMAGE_TAG:-latest}
    container_name: celebrum-ccxt
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - STARTUP_PHASE=3
      - WARMUP_ENABLED=true
      - ADMIN_API_KEY=${ADMIN_API_KEY:?ADMIN_API_KEY must be set in .env file}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-}
      - OTEL_SERVICE_NAME=ccxt-service
      - OTEL_RESOURCE_ATTRIBUTES=service.name=ccxt-service,service.version=${IMAGE_TAG:-latest}
    ports:
      - "${CCXT_HOST_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "${HEALTHCHECK_COMMAND:-curl}", "-f", "http://localhost:3000/health"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 90s
    networks:
      - celebrum-network

  # PHASE 3: Main Go Application - Warm-up Phase
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: celebrum-ai/app:${IMAGE_TAG:-latest}
    container_name: celebrum-app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER:-postgres}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      - DATABASE_DBNAME=${POSTGRES_DB:-celebrum_ai}
      - DATABASE_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CCXT_SERVICE_URL=http://ccxt-service:3000
      - CCXT_TIMEOUT=30
      - STARTUP_PHASE=3
      - WARMUP_ENABLED=true
      - EXTERNAL_CONNECTIONS_ENABLED=${EXTERNAL_CONNECTIONS_ENABLED:-false}
      - TELEGRAM_WEBHOOK_ENABLED=${TELEGRAM_WEBHOOK_ENABLED:-false}
      - TELEGRAM_USE_POLLING=${TELEGRAM_USE_POLLING:-true}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-}
      - OTEL_SERVICE_NAME=celebrum-ai-app
      - OTEL_RESOURCE_ATTRIBUTES=service.name=celebrum-ai-app,service.version=${IMAGE_TAG:-latest}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SERVER_PORT=${SERVER_PORT:-8081}
    volumes:
      - app_data:/data
    ports:
      - "${APP_HOST_PORT:-8081}:${SERVER_PORT:-8081}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ccxt-service:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "${HEALTHCHECK_COMMAND:-wget}", "--no-verbose", "--tries=1", "--spider", "http://localhost:${SERVER_PORT:-8081}/health"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 120s
    networks:
      - celebrum-network

  # PHASE 2: Nginx reverse proxy - Gateway Phase
  nginx:
    image: nginx:alpine
    container_name: celebrum-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
    environment:
      - STARTUP_PHASE=2
      - EXTERNAL_CONNECTIONS_ENABLED=${EXTERNAL_CONNECTIONS_ENABLED:-false}
    healthcheck:
      test: ["CMD", "${HEALTHCHECK_COMMAND:-wget}", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      app:
        condition: service_healthy
      ccxt-service:
        condition: service_healthy
    networks:
      - celebrum-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

networks:
  celebrum-network:
    driver: bridge