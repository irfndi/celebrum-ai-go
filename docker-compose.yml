services:
  postgres:
    image: postgres:17
    container_name: celebrum-postgres
    environment:
      # SECURITY: Default passwords removed - must be set via environment variables
      # Set POSTGRES_PASSWORD in your .env file for security
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      POSTGRES_DB: ${POSTGRES_DB:-celebrum_ai}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - celebrum-network

  # Migration Service - Runs automatically to sync all environments
  migrate:
    image: postgres:17
    container_name: celebrum-migrate
    environment:
      # SECURITY: Database credentials must be provided via environment variables
      PGPASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-celebrum_ai}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
    volumes:
      - ./scripts:/scripts
      - ./database/migrations:/database/migrations
    command: ["bash", "/scripts/robust-migrate.sh"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - celebrum-network

  redis:
    image: redis:7-alpine
    container_name: celebrum-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./configs/redis/redis-docker.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - celebrum-network

  # CCXT Service (Node.js)
  ccxt-service:
    build:
      context: ./ccxt-service
      dockerfile: Dockerfile
    image: celebrum-ai/ccxt-service:latest
    container_name: celebrum-ccxt
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - celebrum-network

  # Main Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: celebrum-ai/app:latest
    container_name: celebrum-app
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER:-postgres}
      # SECURITY: Database password must be set via environment variables
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      - DATABASE_DBNAME=${POSTGRES_DB:-celebrum_ai}
      - DATABASE_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CCXT_SERVICE_URL=http://ccxt-service:3001
      - CCXT_TIMEOUT=30
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - celebrum-network

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: celebrum-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/ssl/nginx-selfsigned.crt:/etc/ssl/certs/nginx-selfsigned.crt
      - ./configs/ssl/nginx-selfsigned.key:/etc/ssl/private/nginx-selfsigned.key
    depends_on:
      - app
      - ccxt-service
    networks:
      - celebrum-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  celebrum-network:
    driver: bridge
  default:
    name: celebrum-network
