services:
  # PHASE 1: Database Services
  postgres:
    image: postgres:17
    container_name: celebrum-postgres
    restart: unless-stopped
    environment:
      # SECURITY: Default passwords removed - must be set via environment variables
      # Set POSTGRES_PASSWORD in your .env file for security
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      POSTGRES_DB: ${POSTGRES_DB:-celebrum_ai}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-celebrum_user} && psql -U ${POSTGRES_USER:-celebrum_user} -d ${POSTGRES_DB:-celebrum_ai} -c 'SELECT 1;'"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - celebrum-network

  # Migration Service - Runs automatically to sync all environments
  migrate:
    image: postgres:17
    container_name: celebrum-migrate
    environment:
      # SECURITY: Database credentials must be provided via environment variables
      PGPASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-celebrum_ai}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      # Migration configuration
      MIGRATIONS_DIR: /database/migrations
      # Phase control
      STARTUP_PHASE: "1"
    volumes:
      - ./scripts:/scripts
      - ./database/migrations:/database/migrations
    command: ["bash", "/scripts/simple-migrate.sh"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: "no"
    networks:
      - celebrum-network

  redis:
    image: redis:7-alpine
    container_name: celebrum-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    # SECURITY: Removed host port mapping to prevent external Redis access
    # Redis is only accessible within the Docker network
    volumes:
      - redis_data:/data
      - ./configs/redis/redis-docker.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 30s
    networks:
      - celebrum-network

  # PHASE 3: CCXT Service (Bun) - Warm-up Phase
  ccxt-service:
    build:
      context: ./ccxt-service
      dockerfile: Dockerfile
    image: celebrum-ai/ccxt-service:latest
    container_name: celebrum-ccxt
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - STARTUP_PHASE=3
      - WARMUP_ENABLED=true
      - ADMIN_API_KEY=${ADMIN_API_KEY:?ADMIN_API_KEY must be set in .env file}
      # OpenTelemetry configuration (disabled for local dev)
      # - OTEL_EXPORTER_OTLP_ENDPOINT=http://signoz-otel-collector:4318
      # - OTEL_SERVICE_NAME=ccxt-service
      # - OTEL_RESOURCE_ATTRIBUTES=service.name=ccxt-service,service.version=1.0.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 90s
    networks:
      - celebrum-network

  # PHASE 3: Main Go Application - Warm-up Phase
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: celebrum-ai/app:latest
    container_name: celebrum-app
    restart: unless-stopped
    ports:
      - "8081:8081"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER:-postgres}
      # SECURITY: Database password must be set via environment variables
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set in .env file}
      - DATABASE_DBNAME=${POSTGRES_DB:-celebrum_ai}
      - DATABASE_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CCXT_SERVICE_URL=http://ccxt-service:3000
      - CCXT_TIMEOUT=30
      # Phase control
      - STARTUP_PHASE=3
      - WARMUP_ENABLED=true
      - EXTERNAL_CONNECTIONS_ENABLED=${EXTERNAL_CONNECTIONS_ENABLED:-false}
      - TELEGRAM_WEBHOOK_ENABLED=${TELEGRAM_WEBHOOK_ENABLED:-false}
      - TELEGRAM_USE_POLLING=${TELEGRAM_USE_POLLING:-true}
      # OpenTelemetry configuration (disabled for local dev)
      # - OTEL_EXPORTER_OTLP_ENDPOINT=http://signoz-otel-collector:4318
      # - OTEL_SERVICE_NAME=celebrum-ai-app
      # - OTEL_RESOURCE_ATTRIBUTES=service.name=celebrum-ai-app,service.version=1.0.0
      # Go application telemetry configuration (viper expects TELEMETRY_*)
      # - TELEMETRY_ENABLED=true
      # - TELEMETRY_OTLP_ENDPOINT=http://signoz-otel-collector:4318
      # Enable debug logging to see telemetry initialization
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ccxt-service:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 120s
    networks:
      - celebrum-network

  # PHASE 2: Nginx reverse proxy - Gateway Phase
  nginx:
    image: nginx:alpine
    container_name: celebrum-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
    environment:
      - STARTUP_PHASE=2
      - EXTERNAL_CONNECTIONS_ENABLED=${EXTERNAL_CONNECTIONS_ENABLED:-false}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      app:
        condition: service_healthy
      ccxt-service:
        condition: service_healthy
    networks:
      - celebrum-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  celebrum-network:
    driver: bridge
  default:
    name: celebrum-network
