version: '3.8'

services:
  postgres:
    image: postgres:17
    container_name: celebrum-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - celebrum-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: celebrum-redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - celebrum-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # CCXT Service (TypeScript/Node.js)
  ccxt-service:
    build:
      context: ./ccxt-service
      dockerfile: Dockerfile
    container_name: celebrum-ccxt
    ports:
      - "${CCXT_SERVICE_PORT:-3001}:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3001
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - celebrum-network
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # Main Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celebrum-app
    ports:
      - "${SERVER_PORT:-8080}:8080"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_DBNAME=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CCXT_SERVICE_URL=${CCXT_SERVICE_URL}
      - CONFIG_PATH=${CONFIG_PATH}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ccxt-service:
        condition: service_healthy
    networks:
      - celebrum-network
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: celebrum-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - celebrum-network
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  celebrum-network:
    name: celebrum-network
    driver: bridge
