services:
  # PHASE 1: Database Services
  postgres:
    image: postgres:17
    container_name: celebrum-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set for production security} # REQUIRED: Set POSTGRES_PASSWORD env var
      POSTGRES_DB: celebrum_ai
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      # Phase control
      STARTUP_PHASE: "1"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-minimal.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database:/database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres && psql -U postgres -d celebrum_ai -c 'SELECT 1;'"]
      interval: 20s
      timeout: 30s
      retries: 20
      start_period: 120s
    networks:
      - celebrum-network

  # Migration Service - Runs automatically to sync all environments
  migrate:
    image: postgres:17
    container_name: celebrum-migrate
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set for production security} # REQUIRED: Use environment variable
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: celebrum_ai
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set for production security} # REQUIRED: Use environment variable
      # Phase control
      STARTUP_PHASE: "1"
    volumes:
      - ./scripts:/scripts
      - ./database/migrations:/database/migrations
    command: ["bash", "/scripts/simple-migrate.sh"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - celebrum-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: celebrum-redis
    restart: unless-stopped
    environment:
      # Phase control
      - STARTUP_PHASE=1
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 30s
    networks:
      - celebrum-network

  # PHASE 3: CCXT Service (Bun) - Warm-up Phase
  ccxt-service:
    build:
      context: ./ccxt-service
      dockerfile: Dockerfile
    container_name: celebrum-ccxt
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - STARTUP_PHASE=3
      - WARMUP_ENABLED=true
      - API_KEY=${API_KEY:?API_KEY must be set for ccxt-service}
      - ADMIN_API_KEY=${ADMIN_API_KEY:?ADMIN_API_KEY must be set for ccxt-service}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "sh -c \"curl http://localhost:3000/health || wget -q --spider http://localhost:3000/health\""]
      interval: 25s
      timeout: 20s
      retries: 6
      start_period: 90s
    networks:
      - celebrum-network

  # PHASE 3: Main Go Application - Warm-up Phase
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celebrum-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set for production security} # REQUIRED: Use environment variable
      - DATABASE_DBNAME=celebrum_ai
      - DATABASE_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CCXT_SERVICE_URL=http://ccxt-service:3000
      - CCXT_TIMEOUT=30
      - JWT_SECRET=${JWT_SECRET} # REQUIRED: Set JWT_SECRET env var
      - SERVER_PORT=8080
      # Phase control - External connections disabled during warmup
      - STARTUP_PHASE=3
      - WARMUP_ENABLED=true
      - EXTERNAL_CONNECTIONS_ENABLED=${EXTERNAL_CONNECTIONS_ENABLED:-false}
      - TELEGRAM_WEBHOOK_ENABLED=${TELEGRAM_WEBHOOK_ENABLED:-false}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - TELEGRAM_WEBHOOK_SECRET=${TELEGRAM_WEBHOOK_SECRET}
      - FEATURE_TELEGRAM_BOT=${FEATURE_TELEGRAM_BOT:-true}
    volumes:
      - app_data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ccxt-service:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "sh -c \"curl http://localhost:8080/health || wget -q --spider http://localhost:8080/health\""]
      interval: 25s
      timeout: 20s
      retries: 6
      start_period: 120s
    networks:
      - celebrum-network

  # PHASE 2: Nginx reverse proxy - Gateway Phase
  nginx:
    image: nginx:alpine
    container_name: celebrum-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "8443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl/nginx-selfsigned.crt:/etc/ssl/certs/nginx-selfsigned.crt:ro
      - ./configs/ssl/nginx-selfsigned.key:/etc/ssl/private/nginx-selfsigned.key:ro
    environment:
      - STARTUP_PHASE=2
      - EXTERNAL_CONNECTIONS_ENABLED=${EXTERNAL_CONNECTIONS_ENABLED:-false}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      app:
        condition: service_healthy
      ccxt-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "sh -c \"curl http://localhost/health || wget -q --spider http://localhost/health\""]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 60s
    networks:
      - celebrum-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

networks:
  celebrum-network:
    driver: bridge
