name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: celebrum_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/celebrum_test?sslmode=disable
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_DBNAME: celebrum_test
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_URL: redis://localhost:6379
      CCXT_SERVICE_URL: http://localhost:3001
      CONFIG_PATH: configs/config.ci.yml

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: ccxt-service/package-lock.json
    
    - name: Install dependencies
      run: |
        cd ccxt-service
        npm install
    
    - name: Download Go dependencies
      run: go mod download
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
    
    - name: Check formatting
      run: make fmt-check
    
    - name: Start CCXT service
      run: |
        cd ccxt-service
        npm run start:ci &
        CCXT_PID=$!
        echo "Waiting for CCXT service to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:3001/health >/dev/null 2>&1; then
            echo "CCXT service is ready"
            break
          fi
          echo "Attempt $i/30: CCXT service not ready, waiting..."
          sleep 2
        done
        if ! curl -f http://localhost:3001/health >/dev/null 2>&1; then
          echo "CCXT service failed to start within 60 seconds"
          kill $CCXT_PID || true
          exit 1
        fi
        
        # Run Go tests
        cd ..
        go test -v -race -coverprofile=coverage.out ./...
        
        # Clean up CCXT service
        kill $CCXT_PID || true
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/celebrum_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application
      run: |
        # Build with CI configuration
        CONFIG_PATH=configs/config.ci.yml make build

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for OIDC
      attestations: write  # Required for provenance
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          CCXT_SERVICE_URL=${{ secrets.CCXT_SERVICE_URL }}
          CONFIG_PATH=configs/config.prod.yml
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate build provenance attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to DigitalOcean
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Setup SSH key
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Setup SSH key with proper formatting
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key_raw
        cat ~/.ssh/deploy_key_raw | tr -d '\r' | sed 's/\n/\n/g' > ~/.ssh/deploy_key
        sed -i 's/$//' ~/.ssh/deploy_key
        
        # Verify key format
        echo "Checking SSH key format..."
        head -1 ~/.ssh/deploy_key
        tail -1 ~/.ssh/deploy_key
        
        if ! head -1 ~/.ssh/deploy_key | grep -q "BEGIN.*PRIVATE KEY"; then
          echo "Error: SSH key does not start with proper header"
          exit 1
        fi
        
        if ! tail -1 ~/.ssh/deploy_key | grep -q "END.*PRIVATE KEY"; then
          echo "Error: SSH key does not end with proper footer"
          exit 1
        fi
        
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
        # Test SSH connection
        for i in {1..3}; do
          if ssh -i ~/.ssh/deploy_key -o ConnectTimeout=30 -o ServerAliveInterval=60 -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"; then
            echo "SSH connection test successful"
            break
          else
            echo "SSH connection attempt $i failed, retrying..."
            sleep 15
            if [ $i -eq 3 ]; then
              echo "SSH connection failed after 3 attempts"
              exit 1
            fi
          fi
        done
    
    - name: Deploy with environment variables
      run: |
        # Create production environment file
        ssh -i ~/.ssh/deploy_key ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -euo pipefail
          
          # Ensure target directory exists
          mkdir -p /root/celebrum-ai-go
          
          # Create production environment file with secure permissions
          cat > /root/celebrum-ai-go/.env << 'ENV_EOF'
          ENVIRONMENT=production
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          CCXT_SERVICE_URL=http://ccxt-service:3001
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_WEBHOOK_URL=${{ secrets.TELEGRAM_WEBHOOK_URL }}
          TELEGRAM_WEBHOOK_SECRET=${{ secrets.TELEGRAM_WEBHOOK_SECRET }}
          CONFIG_PATH=configs/config.prod.yml
          ENV_EOF
          chmod 600 /root/celebrum-ai-go/.env
          
          # Deploy with production configuration
          cd /root/celebrum-ai-go
          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --force-recreate
          
          # Health check
          sleep 30
          docker compose ps
          curl -f http://localhost:8080/health || exit 1
        EOF