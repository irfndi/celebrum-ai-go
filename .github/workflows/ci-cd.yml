name: CI/CD Pipeline

on:
  push:
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.25.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    # Removed PostgreSQL and Redis services for faster CI
    # Tests will use in-memory alternatives
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.4.0
        args: --timeout=5m --output-format=colored-line-number
    
    - name: Check formatting
      run: make fmt-check
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/celebrum_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
    
    - name: Run Gemini CLI
      uses: google-github-actions/run-gemini-cli@v0.1.11
      with:
        gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application
      run: go build -v ./cmd/server

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Removed test-deployment step to speed up CI
  # Full deployment testing is done in production environment

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Deploy to DigitalOcean
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Setup SSH key
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Setup SSH key with proper formatting
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key_raw
        
        # Clean up the key format
        cat ~/.ssh/deploy_key_raw | tr -d '\r' | sed 's/\\n/\n/g' > ~/.ssh/deploy_key
        
        # Ensure proper line endings
        sed -i 's/$//' ~/.ssh/deploy_key
        
        # Verify key format
        echo "Checking SSH key format..."
        head -1 ~/.ssh/deploy_key
        tail -1 ~/.ssh/deploy_key
        
        # Ensure the key starts and ends properly
        if ! head -1 ~/.ssh/deploy_key | grep -q "BEGIN.*PRIVATE KEY"; then
          echo "Error: SSH key does not start with proper header"
          echo "First line: $(head -1 ~/.ssh/deploy_key)"
          exit 1
        fi
        
        if ! tail -1 ~/.ssh/deploy_key | grep -q "END.*PRIVATE KEY"; then
          echo "Error: SSH key does not end with proper footer"
          echo "Last line: $(tail -1 ~/.ssh/deploy_key)"
          exit 1
        fi
        
        # Set proper permissions
        chmod 600 ~/.ssh/deploy_key
        
        # Add server to known hosts
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
        # Verify key can be loaded
        ssh-keygen -l -f ~/.ssh/deploy_key || {
          echo "Error: SSH key validation failed"
          echo "Key content (first 3 lines):"
          head -3 ~/.ssh/deploy_key
          exit 1
        }
        
        # Test SSH connection
        ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"
    
    - name: Update deployment
      run: |
        # Get the latest image tag
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Deploy to server with proper SSH options
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=~/.ssh/known_hosts ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -e
          
          # Create application directory if it doesn't exist
          sudo mkdir -p /opt/celebrum-ai-go
          sudo chown $USER:$USER /opt/celebrum-ai-go
          
          # Clone or update repository
          if [ ! -d "/opt/celebrum-ai-go/.git" ]; then
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git /opt/celebrum-ai-go
          else
            echo "Updating repository..."
            cd /opt/celebrum-ai-go
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Change to application directory
          cd /opt/celebrum-ai-go
          
          # Stop existing services
          docker compose -f docker-compose.single-droplet.yml down || true
          
          # Pull latest images
          docker compose -f docker-compose.single-droplet.yml pull
          
          # Update and restart services with increased timeout
          COMPOSE_HTTP_TIMEOUT=300 docker compose -f docker-compose.single-droplet.yml up -d --remove-orphans
          
          # Wait for services to be healthy
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c 'until docker compose -f docker-compose.single-droplet.yml ps | grep -q "healthy"; do sleep 5; done' || {
            echo "Services failed to become healthy"
            docker compose -f docker-compose.single-droplet.yml logs
            exit 1
          }
          
          # Clean up unused images
          docker system prune -f
          
          # Verify deployment
          docker compose -f docker-compose.single-droplet.yml ps
        EOF
    
    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key ~/.ssh/deploy_key_raw

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here (Slack, Discord, etc.)
    
    - name: Notify Failure
      if: needs.deploy.result == 'failure' || needs.test.result == 'failure' || needs.build-and-push.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add notification logic here (Slack, Discord, etc.)