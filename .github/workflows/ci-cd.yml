name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    # Removed PostgreSQL and Redis services for faster CI
    # Tests will use in-memory alternatives
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
    
    - name: Check formatting
      run: make fmt-check
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/celebrum_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application
      run: go build -v ./cmd/server

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for OIDC
      attestations: write  # Required for provenance
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: Generate build provenance attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

  # Removed test-deployment step to speed up CI
  # Full deployment testing is done in production environment

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to DigitalOcean
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Setup SSH key
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Setup SSH key with proper formatting
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key_raw
        
        # Clean up the key format
        cat ~/.ssh/deploy_key_raw | tr -d '\r' | sed 's/\\n/\n/g' > ~/.ssh/deploy_key
        
        # Ensure proper line endings
        sed -i 's/$//' ~/.ssh/deploy_key
        
        # Verify key format
        echo "Checking SSH key format..."
        head -1 ~/.ssh/deploy_key
        tail -1 ~/.ssh/deploy_key
        
        # Ensure the key starts and ends properly
        if ! head -1 ~/.ssh/deploy_key | grep -q "BEGIN.*PRIVATE KEY"; then
          echo "Error: SSH key does not start with proper header"
          echo "First line: $(head -1 ~/.ssh/deploy_key)"
          exit 1
        fi
        
        if ! tail -1 ~/.ssh/deploy_key | grep -q "END.*PRIVATE KEY"; then
          echo "Error: SSH key does not end with proper footer"
          echo "Last line: $(tail -1 ~/.ssh/deploy_key)"
          exit 1
        fi
        
        # Set proper permissions
        chmod 600 ~/.ssh/deploy_key
        
        # Add server to known hosts
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
        # Verify key can be loaded
        ssh-keygen -l -f ~/.ssh/deploy_key || {
          echo "Error: SSH key validation failed"
          echo "Key content (first 3 lines):"
          head -3 ~/.ssh/deploy_key
          exit 1
        }
        
        # Test SSH connection with increased timeout and keep-alive
        for i in {1..3}; do
          if ssh -i ~/.ssh/deploy_key -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"; then
            echo "SSH connection test successful"
            break
          else
            echo "SSH connection attempt $i failed, retrying..."
            sleep 15
            if [ $i -eq 3 ]; then
              echo "SSH connection failed after 3 attempts"
              exit 1
            fi
          fi
        done
    
    - name: Update deployment
      run: |
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Deploy to server with retry mechanism
        for attempt in {1..3}; do
          echo "Deployment attempt $attempt..."
          if ssh -i ~/.ssh/deploy_key -o ConnectTimeout=60 -o ServerAliveInterval=60 -o ServerAliveCountMax=20 -o StrictHostKeyChecking=no -o UserKnownHostsFile=~/.ssh/known_hosts ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
        set -e
        
        # Create application directory if it doesn't exist
        sudo mkdir -p /opt/celebrum-ai-go
        sudo chown $USER:$USER /opt/celebrum-ai-go
        
        # Clone or update repository
        if [ ! -d "/opt/celebrum-ai-go/.git" ]; then
          echo "Cloning repository..."
          git clone https://github.com/${{ github.repository }}.git /opt/celebrum-ai-go
        else
          echo "Updating repository..."
          cd /opt/celebrum-ai-go
          git fetch origin
          git reset --hard origin/main
        fi
        
        # Change to application directory
        cd /opt/celebrum-ai-go
        
        # Create .env file from GitHub Secrets
        echo "Creating environment configuration..."
        cat > .env << 'ENV_EOF'
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_WEBHOOK_URL=${{ secrets.TELEGRAM_WEBHOOK_URL }}
        TELEGRAM_WEBHOOK_SECRET=${{ secrets.TELEGRAM_WEBHOOK_SECRET }}
        FEATURE_TELEGRAM_BOT=${{ secrets.FEATURE_TELEGRAM_BOT }}
        ENVIRONMENT=production
        ENV_EOF
        
        # Create minimal .env if secrets are empty
        if [[ ! -s .env ]]; then
          echo "JWT_SECRET=your-super-secret-jwt-key-change-this" > .env
          echo "ENVIRONMENT=production" >> .env
          echo "FEATURE_TELEGRAM_BOT=true" >> .env
        fi
        
        # Stop existing services
        docker compose -f docker-compose.single-droplet.yml down || true
        
        # Pull latest images
        docker compose -f docker-compose.single-droplet.yml pull
        
        # Update and restart services with increased timeout
        COMPOSE_HTTP_TIMEOUT=300 docker compose -f docker-compose.single-droplet.yml up -d --remove-orphans
        
        # Wait for services to be healthy with longer timeout
        echo "Waiting for services to be healthy..."
        timeout 600 bash -c 'until docker compose -f docker-compose.single-droplet.yml ps | grep -q "healthy"; do sleep 10; done' || {
          echo "Services failed to become healthy within timeout"
          docker compose -f docker-compose.single-droplet.yml logs --tail=50
          exit 1
        }
        
        # Clean up unused images
        docker system prune -f
        
        # Verify deployment
        docker compose -f docker-compose.single-droplet.yml ps
        EOF
          then
            echo "Deployment successful on attempt $attempt"
            break
          else
            echo "Deployment attempt $attempt failed"
            if [ $attempt -eq 3 ]; then
              echo "Deployment failed after 3 attempts"
              exit 1
            fi
            echo "Retrying in 30 seconds..."
            sleep 30
          fi
        done
    
    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key ~/.ssh/deploy_key_raw

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here (Slack, Discord, etc.)
    
    - name: Notify Failure
      if: needs.deploy.result == 'failure' || needs.test.result == 'failure' || needs.build-and-push.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add notification logic here (Slack, Discord, etc.)