name: Celebrum AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop, development, staging ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop, development ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deployment_type:
        description: 'Deployment strategy'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - zero-downtime
        - rolling
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.25.0'
  NODE_VERSION: '20'

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
      deployment_type: ${{ steps.check.outputs.deployment_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check deployment conditions
        id: check
        run: |
          # Determine if we should deploy
          SHOULD_DEPLOY="false"
          ENVIRONMENT="staging"
          DEPLOYMENT_TYPE="standard"
          
          # Manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SHOULD_DEPLOY="true"
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}"
          # Push to main/master -> production
          elif [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
            SHOULD_DEPLOY="true"
            ENVIRONMENT="production"
            DEPLOYMENT_TYPE="zero-downtime"
          # Push to development -> staging
          elif [ "${{ github.ref }}" = "refs/heads/development" ]; then
            SHOULD_DEPLOY="true"
            ENVIRONMENT="staging"
            DEPLOYMENT_TYPE="standard"
          # Push to staging -> staging
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            SHOULD_DEPLOY="true"
            ENVIRONMENT="staging"
            DEPLOYMENT_TYPE="standard"
          # Tags -> production
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            SHOULD_DEPLOY="true"
            ENVIRONMENT="production"
            DEPLOYMENT_TYPE="zero-downtime"
          fi
          
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "deployment_type=$DEPLOYMENT_TYPE" >> $GITHUB_OUTPUT
          
          echo "Should deploy: $SHOULD_DEPLOY"
          echo "Environment: $ENVIRONMENT"
          echo "Deployment type: $DEPLOYMENT_TYPE"

  # Build and test
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.skip_tests }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_TEST_PASSWORD }}
          POSTGRES_DB: celebrum_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      - name: Clean up existing cache
        run: |
          go clean -cache -modcache -testcache

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          cd ccxt-service && bun install --frozen-lockfile

      - name: Run CI/CD integration tests
        env:
          DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_TEST_PASSWORD }}@localhost:5432/celebrum_test?sslmode=disable
          REDIS_URL: redis://localhost:6379
          TEST_REDIS_ADDR: localhost:6379
          RUN_TESTS: "true"
          RUN_SECURITY_SCAN: "true"
          RUN_PERFORMANCE_TEST: "false"
          CI_ENVIRONMENT: "test"
        run: |
          chmod +x scripts/ci-cd-integration.sh
          scripts/ci-cd-integration.sh test

      - name: Coverage Check (non-blocking)
        run: |
          make coverage-check
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ci-artifacts/test-results/
            ci-artifacts/coverage/
            ci-artifacts/reports/

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.25.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run security scan via CI/CD integration
        env:
          RUN_SECURITY_SCAN: true
        run: |
          chmod +x scripts/ci-cd-integration.sh
          scripts/ci-cd-integration.sh security

  # Build Docker images and extract artifacts
  build:
    name: Build Images & Extract Artifacts
    runs-on: ubuntu-latest
    needs: [preflight]
    if: needs.preflight.outputs.should_deploy == 'true'
    permissions:
      packages: write
      contents: read
      id-token: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      artifacts_path: ${{ steps.extract.outputs.artifacts_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      - name: Extract binary artifacts
        id: extract
        run: |
          # Create artifacts directory
          mkdir -p artifacts/go-backend artifacts/ccxt-service
          
          # Extract Go backend binary
          docker build --target binary -o artifacts/go-backend/ .
          
          # Extract CCXT service artifacts
          cd ccxt-service
          docker build --target binary -o ../artifacts/ccxt-service/ .
          cd ..
          
          # Package artifacts
          tar -czf artifacts.tar.gz -C artifacts .
          
          echo "artifacts_path=artifacts.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: artifacts.tar.gz
          retention-days: 30

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  # Deploy to staging (containers)
  deploy-staging-containers:
    name: Deploy to Staging (Containers)
    runs-on: ubuntu-latest
    needs: [preflight, test, security, build]
    if: |
      always() &&
      needs.preflight.outputs.should_deploy == 'true' && 
      needs.preflight.outputs.environment == 'staging' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests) ||
        (needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success')
      )
    environment:
      name: staging
      url: https://staging.celebrum-ai.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          DEPLOYMENT_TYPE: ${{ needs.preflight.outputs.deployment_type }}
          CI_ENVIRONMENT: staging
          SKIP_BACKUP: false
          AUTO_ROLLBACK: true
          NOTIFY_SLACK: true
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          SECRET_KEY: ${{ secrets.STAGING_SECRET_KEY }}
        run: |
          chmod +x scripts/ci-cd-integration.sh
          scripts/ci-cd-integration.sh deploy

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-deployment-artifacts
          path: ci-artifacts/

  # Deploy to staging (binary)
  deploy-staging-binary:
    name: Deploy to Staging (Binary)
    runs-on: ubuntu-latest
    needs: [preflight, test, security, build]
    if: |
      always() &&
      needs.preflight.outputs.should_deploy == 'true' && 
      needs.preflight.outputs.environment == 'staging' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests) ||
        (needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success')
      )
    environment:
      name: staging-binary
      url: https://staging-binary.celebrum-ai.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: artifacts/

      - name: Extract artifacts
        run: |
          tar -xzf artifacts/artifacts.tar.gz

      - name: Deploy binary to staging
        env:
          DEPLOYMENT_TYPE: binary
          CI_ENVIRONMENT: staging
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          SECRET_KEY: ${{ secrets.STAGING_SECRET_KEY }}
        run: |
          chmod +x scripts/deploy-binary.sh
          scripts/deploy-binary.sh staging

  # Deploy to production (hybrid)
  deploy-production:
    name: Deploy to Production (Hybrid)
    runs-on: ubuntu-latest
    needs: [preflight, test, security, build]
    if: |
      always() &&
      needs.preflight.outputs.should_deploy == 'true' && 
      needs.preflight.outputs.environment == 'production' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests) ||
        (needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success')
      )
    environment:
      name: production
      url: https://celebrum-ai.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: artifacts/

      - name: Extract artifacts
        run: |
          tar -xzf artifacts/artifacts.tar.gz

      - name: Deploy binary to production
        env:
          DEPLOYMENT_TYPE: binary
          CI_ENVIRONMENT: production
          SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.PRODUCTION_SSH_HOST }}
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
          SECRET_KEY: ${{ secrets.PRODUCTION_SECRET_KEY }}
        run: |
          chmod +x scripts/deploy-binary.sh
          scripts/deploy-binary.sh production

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-deployment-artifacts
          path: ci-artifacts/

  # Post-deployment verification
  verify:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [preflight, deploy-staging-containers, deploy-staging-binary, deploy-production]
    if: always() && (needs.deploy-staging-containers.result == 'success' || needs.deploy-staging-binary.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify deployment
        env:
          CI_ENVIRONMENT: ${{ needs.preflight.outputs.environment }}
        run: |
          chmod +x scripts/deploy-master.sh
          scripts/deploy-master.sh verify

      - name: Run health checks
        env:
          CI_ENVIRONMENT: ${{ needs.preflight.outputs.environment }}
        run: |
          chmod +x scripts/health-monitor-enhanced.sh
          scripts/health-monitor-enhanced.sh verify

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [preflight, deploy-staging-containers, deploy-staging-binary, deploy-production, verify]
    if: always() && needs.preflight.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine notification status
        id: status
        run: |
          if [ "${{ needs.deploy-staging-containers.result }}" = "success" ] || [ "${{ needs.deploy-staging-binary.result }}" = "success" ] || [ "${{ needs.deploy-production.result }}" = "success" ]; then
            if [ "${{ needs.verify.result }}" = "success" ]; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "message=Deployment completed successfully" >> $GITHUB_OUTPUT
            else
              echo "status=warning" >> $GITHUB_OUTPUT
              echo "message=Deployment completed but verification failed" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Deployment failed" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        env:
          NOTIFY_SLACK: true
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          CI_ENVIRONMENT: ${{ needs.preflight.outputs.environment }}
        run: |
          chmod +x scripts/ci-cd-integration.sh
          scripts/ci-cd-integration.sh notify "${{ steps.status.outputs.status }}" "${{ steps.status.outputs.message }}"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cleanup CI artifacts
        run: |
          chmod +x scripts/ci-cd-integration.sh
          scripts/ci-cd-integration.sh cleanup
