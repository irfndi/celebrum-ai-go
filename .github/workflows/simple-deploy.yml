name: Simple Auto Deploy to Production

on:
  push:
    branches: [ main, development ]

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        env:
          SSH_HOST: ${{ secrets.PRODUCTION_SSH_HOST || '194.233.73.250' }}
          SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY || secrets.SSH_PRIVATE_KEY }}
        run: |
          # Save SSH key
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add server to known hosts
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          
          # Deploy to server
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key root@$SSH_HOST "
            cd /root/celebrum-ai-go
            
            # Pull latest changes
            git pull origin ${GITHUB_REF#refs/heads/}
            
            # Build and restart services
            docker-compose -f docker-compose.single-droplet.yml down
            docker-compose -f docker-compose.single-droplet.yml build --no-cache
            docker-compose -f docker-compose.single-droplet.yml up -d
            
            # Show status
            echo 'Deployment completed. Service status:'
            docker-compose -f docker-compose.single-droplet.yml ps
            
            # Show logs from app service
            echo 'Application logs:'
            docker-compose -f docker-compose.single-droplet.yml logs --tail=20 app || echo 'No app logs available'
          "

      - name: Verify deployment
        env:
          SSH_HOST: ${{ secrets.PRODUCTION_SSH_HOST || '194.233.73.250' }}
          SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY || secrets.SSH_PRIVATE_KEY }}
        run: |
          # Wait for services to start
          sleep 10
          
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key root@$SSH_HOST "
            cd /root/celebrum-ai-go
            
            # Check service health
            echo 'Checking service health...'
            docker-compose -f docker-compose.single-droplet.yml ps
            
            # Test application endpoints
            echo 'Testing application endpoints...'
            curl -f http://localhost:8080/health || echo 'Health check failed'
            curl -f http://localhost:8080/api/v1/status || echo 'Status check failed'
          "
        continue-on-error: true

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f ~/.ssh/known_hosts