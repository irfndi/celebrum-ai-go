name: Build and Test

on:
  push:
  pull_request:

env:
  GO_VERSION: '1.25.0'
  NODE_VERSION: '24'

jobs:
  test-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Install dependencies
        run: go mod download
        
      - name: Run tests
        run: make test

      - name: Run linter
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.5.0
          args: --timeout=5m
      
      - name: Coverage Check (non-blocking)
        run: |
          make coverage-check
        continue-on-error: true

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-artifacts
          path: ci-artifacts/coverage/
          
      - name: Build Go binary
        run: make build

  test-ccxt:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ccxt-service
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
          
      - name: Install dependencies
        run: bun install
        
      - name: Run tests
        run: bun test
        
      - name: Build CCXT service
        run: bun run build

  build-docker:
    runs-on: ubuntu-latest
    needs: [test-go, test-ccxt]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build API server image
        run: |
          docker build -t celebrum-api:${{ github.sha }} .
          docker save celebrum-api:${{ github.sha }} > celebrum-api.tar
          docker images | grep celebrum-api
          
      - name: Build CCXT service image
        run: |
          cd ccxt-service
          docker build -t celebrum-ccxt:${{ github.sha }} .
          docker save celebrum-ccxt:${{ github.sha }} > ../celebrum-ccxt.tar
          
      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          cp celebrum-api.tar celebrum-ccxt.tar deployment-package/
          cp -r docker-compose.single-droplet.yml deployment-package/
          cp -r scripts deployment-package/
          cp -r configs deployment-package/
          tar -czf deployment-package-${{ github.sha }}.tar.gz deployment-package/
          
      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: deployment-package-${{ github.sha }}.tar.gz
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-docker]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          
      - name: Extract Docker images
        run: |
          tar -xzf deployment-package-${{ github.sha }}.tar.gz
          cd deployment-package
          docker load < celebrum-api.tar
          
      - name: Aqua Security Trivy
        id: trivy
        uses: aquasecurity/trivy-action@v0.33.1
        with:
          image-ref: 'celebrum-api:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
